xquery version "3.0";

module namespace app="http://github.com/Capitains/InventoryMaker/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://github.com/Capitains/InventoryMaker/config" at "config.xqm";

declare namespace ti="http://chs.harvard.edu/xmlns/cts";

declare variable $app:conf := doc("../conf/conf.xml");
(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:listInventories($node as node(), $model as map(*)) {
    <ol class="cts vertical">
        {app:getInventories()}
    </ol>
};

declare function app:getInventories() {
    for $repo in $app:conf//collection
        let $collection := collection($repo/text())
        return
            element li {
                $repo/text(),
                element ol {
                    for $tg in $collection//ti:textgroup
                        return 
                            element li {
                                $tg/@urn,
                                fn:string($tg/ti:groupname[1]/text()),
                                element ol {
                                    for $wk in $collection//ti:work[@groupUrn=$tg/@urn]
                                        return 
                                            element li {
                                                $wk/@urn,
                                                fn:string($wk/ti:title[1]/text()),
                                                element ol {
                                                    for $ed in $collection//ti:edition[starts-with(@urn, $wk/@urn)]
                                                        return 
                                                            element li {
                                                                $ed/@urn,
                                                                fn:string-join(("Edition : ", fn:string($ed/ti:label[1]/text())))
                                                            }, 
                                                    for $tr in $collection//ti:translation[starts-with(@urn, $wk/@urn)]
                                                        return 
                                                            element li {
                                                                $tr/@urn,
                                                                fn:string-join(("Translation (", fn:string($tr/@xml:lang) , "): ", fn:string($tr/ti:label[1]/text())))
                                                            }   
                                                }
                                            }
                                }
                            }
                }
            }
};